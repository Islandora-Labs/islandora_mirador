{
  "name": "grunt-extend",
  "description": "Extends JavaScript Objects and JSON files with other JSON files, and writes them to a new JSON file.",
  "version": "0.4.2",
  "homepage": "https://github.com/elgrancalavera/grunt-extend",
  "author": {
    "name": "El Gran Calavera",
    "email": "grancalavera@gmail.com",
    "url": "grancalavera.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/elgrancalavera/grunt-extend.git"
  },
  "bugs": {
    "url": "https://github.com/elgrancalavera/grunt-extend/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/elgrancalavera/grunt-extend/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "json",
    "configuration"
  ],
  "readme": "# grunt-extend [![Build Status](https://travis-ci.org/elgrancalavera/grunt-extend.png?branch=master)](https://travis-ci.org/elgrancalavera/grunt-extend)\n\n> Extends JavaScript Objects and JSON files with other JSON files, and writes them to a new JSON file\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-extend --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-extend');\n```\n\n## The \"extend\" task\nThis task extends JavaScript Objects and JSON files with other JSON files, using Lo-Dash\n[`_.extend()`](http://lodash.com/docs#assign) and [`_.merge()`](http://lodash.com/docs#merge) internally. Once the final object\nis created, the resulting object is written to a new JSON file.\n\nPossible uses include:\n\n- projects that generate multiple clients\n- projects that share configuration values across multiple clients\n- sharing base configuration values across environments\n\n### Overview\nIn your project's Gruntfile, add a section named `extend` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  extend: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.defaults\nType: `Object`\nDefault value: `{}`\n\nA JavaScript Object used as the base object in the extension chain. Setting\n`options.defaults` as a property of the task will make all of the targets share\nthe same default options. Setting `options.defaults` inside a target will override\nthe task's default options for that target.\n\n### Usage Examples\n\n#### Generate an empty JSON file\nThe basic usage example is using an empty object as the default options and write\nit to a JSON file:\n```js\ngrunt.initConfig({\n  extend: {\n    options: {\n      defaults: {}\n    },\n    empty: {\n      files: {\n        'tmp/config-empty.json': []\n      }\n    }\n  }\n});\n```\n\n#### Generate a JSON file from default options\nThis example uses the default options specified in `options.defaults` and writes\nthem to a JSON file:\n```js\ngrunt.initConfig({\n  extend: {\n    options: {\n      defaults: {\n        coffee: true,\n        options: ['a', 'b', 'c']\n      }\n    },\n    defaultConfig: {\n      files: {\n        'tmp/config-default.json': []\n      }\n    }\n  }\n});\n```\n\n#### Extend the default options using one or more JSON files\nIt is possible to extend the default options with one or more JSON files, and\nwrite the results to a new JSON file:\n```js\ngrunt.initConfig({\n  extend: {\n    options: {\n      defaults: {\n        coffee: true,\n        options: ['a', 'b', 'c']\n      }\n    },\n    extendedConfig: {\n      files: {\n        'tmp/config-base.json': ['.config-base.json']\n      }\n    }\n  }\n});\n```\n\n#### Multiple targets\nExtend is a mult-task, so you can specify multiple targets. Default options can\nbe overridden in individual targets:\n```js\ngrunt.initConfig({\n  extend: {\n    options: {\n      defaults: {\n        coffee: true,\n        options: ['a', 'b', 'c']\n      }\n    },\n    empty: {\n      options: {\n        defaults: {}\n      },\n      files: {\n        'tmp/config-empty.json': []\n      }\n    },\n    defaultConfig: {\n      files: {\n        'tmp/config-default.json': []\n      }\n    },\n    extendedConfig: {\n      files: {\n        'tmp/config-base.json': ['.config-base.json']\n      }\n    },\n    multipleExtensions: {\n      files: {\n        'tmp/config-local.json': ['.config-base.json', '.config-local.json']\n      }\n    }\n  }\n});\n```\n\n#### Single target and multiple files\nIt is also possible to generate multiple files using a single target:\n```js\ngrunt.initConfig({\n  extend: {\n    options: {\n      defaults: {\n        coffee: true,\n        options: ['a', 'b', 'c']\n      }\n    },\n    allEnvironments: {\n      files: {\n        'tmp/config-default.json': [],\n        'tmp/config-base.json': ['.config-base.json'],\n        'tmp/config-local.json': ['.config-base.json', '.config-local.json']\n      }\n    }\n  }\n});\n```\n\n#### Deep extend\nIn order to extend and object deeply, add `deep` to the targets options:\n```js\ngrunt.initConfig({\n  extend: {\n    options: {\n      deep: true,\n      defaults: {\n        coffee: true,\n        options: ['a', 'b', 'c']\n      }\n    },\n    extendedConfig: {\n      files: {\n        'tmp/config-base.json': ['.config-base.json']\n      }\n    }\n  }\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n * 2013-09-38   v0.4.2   Fixing error in documentation.\n * 2013-08-13   v0.4.1   Removing jQuery as a dependency.\n * 2013-08-07   v0.3.0   Support for deep extends.\n * 2013-08-03   v0.2.1   Initial release.\n * 2013-08-03   v0.2.0   Initial release.\n",
  "readmeFilename": "readme.md",
  "_id": "grunt-extend@0.4.2",
  "dist": {
    "shasum": "908f25e99407c195bc2625b41f33b654368d3453"
  },
  "_from": "grunt-extend@~0.4.2",
  "_resolved": "https://registry.npmjs.org/grunt-extend/-/grunt-extend-0.4.2.tgz"
}
